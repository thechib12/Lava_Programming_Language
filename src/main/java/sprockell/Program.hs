module Program where

import BasicFunctions
import HardwareTypes
import Sprockell
import System
import Simulation

prog0 :: [Instruction]
prog0 = [
          Load (ImmValue 0) regA, 
          WriteInstr regA (DirAddr 13), 
          Load (ImmValue 1) regB, 
          WriteInstr reg0 (DirAddr 1), 
          WriteInstr regB (DirAddr 2), 
          Load (ImmValue 1) regC, 
          WriteInstr reg0 (DirAddr 3), 
          WriteInstr regC (DirAddr 4), 
          Nop, 
          Load (ImmValue 12) regD, 
          Push regD, 
          Jump (Abs 25), 
          Load (ImmValue 1) regE, 
          Load (ImmValue 2) regF, 
          Compute Mul regF regE regF, 
          TestAndSet (IndAddr regF), 
          Receive regG, 
          Branch regG (Abs 12), 
          Load (ImmValue 2) regH, 
          Load (ImmValue 2) regI, 
          Compute Mul regI regH regI, 
          TestAndSet (IndAddr regI), 
          Receive regJ, 
          Branch regJ (Abs 18), 
          EndProg, 
          Pop regK, 
          DecrSP, 
          Load (ImmValue 0) regL, 
          Push regL, 
          Pop regM, 
          DecrSP, 
          Load (ImmValue 10) regN, 
          Compute Lt regM regN regO, 
          Branch regO (Abs 50), 
          TestAndSet (DirAddr 12), 
          Receive regP, 
          Branch regP (Abs 34), 
          ReadInstr  (DirAddr 13), 
          Receive regQ, 
          Load (ImmValue 4) regR, 
          Compute Sub regQ regR regS, 
          WriteInstr regS (DirAddr 13), 
          WriteInstr reg0 (DirAddr 12), 
          Pop regA1, 
          DecrSP, 
          Load (ImmValue 1) regB1, 
          Compute Add regA1 regB1 regC1, 
          Pop reg0, 
          Push regC1, 
          Jump (Abs 29), 
          Nop, 
          Jump (Ind regK), 
          Pop regD1, 
          DecrSP, 
          Load (ImmValue 0) regE1, 
          Push regE1, 
          Pop regF1, 
          DecrSP, 
          Load (ImmValue 10) regG1, 
          Compute Lt regF1 regG1 regH1, 
          Branch regH1 (Abs 77), 
          TestAndSet (DirAddr 12), 
          Receive regI1, 
          Branch regI1 (Abs 61), 
          ReadInstr  (DirAddr 13), 
          Receive regJ1, 
          Load (ImmValue 6) regK1, 
          Compute Add regJ1 regK1 regL1, 
          WriteInstr regL1 (DirAddr 13), 
          WriteInstr reg0 (DirAddr 12), 
          Pop regM1, 
          DecrSP, 
          Load (ImmValue 1) regN1, 
          Compute Add regM1 regN1 regO1, 
          Pop reg0, 
          Push regO1, 
          Jump (Abs 56), 
          Nop, 
          Jump (Ind regD1) 
       ] 
prog1 :: [Instruction]
prog1 = [
          Load (ImmValue 1) regA, 
          WriteInstr regA (DirAddr 1), 
          TestAndSet (DirAddr 1), 
          Receive regB, 
          Branch regB (Abs 2), 
          Load (ImmValue 0) regC, 
          Push regC, 
          Pop regD, 
          DecrSP, 
          Load (ImmValue 10) regE, 
          Compute Lt regD regE regF, 
          Branch regF (Abs 28), 
          TestAndSet (DirAddr 12), 
          Receive regG, 
          Branch regG (Abs 12), 
          ReadInstr  (DirAddr 13), 
          Receive regH, 
          Load (ImmValue 6) regI, 
          Compute Add regH regI regJ, 
          WriteInstr regJ (DirAddr 13), 
          WriteInstr reg0 (DirAddr 12), 
          Pop regK, 
          DecrSP, 
          Load (ImmValue 1) regL, 
          Compute Add regK regL regM, 
          Pop reg0, 
          Push regM, 
          Jump (Abs 7), 
          Nop, 
          WriteInstr reg0 (DirAddr 2), 
          EndProg, 
          Pop regN, 
          DecrSP, 
          Load (ImmValue 0) regO, 
          Push regO, 
          Pop regP, 
          DecrSP, 
          Load (ImmValue 10) regQ, 
          Compute Lt regP regQ regR, 
          Branch regR (Abs 56), 
          TestAndSet (DirAddr 12), 
          Receive regS, 
          Branch regS (Abs 40), 
          ReadInstr  (DirAddr 13), 
          Receive regA1, 
          Load (ImmValue 4) regB1, 
          Compute Sub regA1 regB1 regC1, 
          WriteInstr regC1 (DirAddr 13), 
          WriteInstr reg0 (DirAddr 12), 
          Pop regD1, 
          DecrSP, 
          Load (ImmValue 1) regE1, 
          Compute Add regD1 regE1 regF1, 
          Pop reg0, 
          Push regF1, 
          Jump (Abs 35), 
          Nop, 
          Jump (Ind regN) 
       ] 
prog2 :: [Instruction]
prog2 = [
          Load (ImmValue 1) regA, 
          WriteInstr regA (DirAddr 3), 
          TestAndSet (DirAddr 3), 
          Receive regB, 
          Branch regB (Abs 2), 
          Load (ImmValue 0) regC, 
          Push regC, 
          Pop regD, 
          DecrSP, 
          Load (ImmValue 10) regE, 
          Compute Lt regD regE regF, 
          Branch regF (Abs 28), 
          TestAndSet (DirAddr 12), 
          Receive regG, 
          Branch regG (Abs 12), 
          ReadInstr  (DirAddr 13), 
          Receive regH, 
          Load (ImmValue 4) regI, 
          Compute Sub regH regI regJ, 
          WriteInstr regJ (DirAddr 13), 
          WriteInstr reg0 (DirAddr 12), 
          Pop regK, 
          DecrSP, 
          Load (ImmValue 1) regL, 
          Compute Add regK regL regM, 
          Pop reg0, 
          Push regM, 
          Jump (Abs 7), 
          Nop, 
          WriteInstr reg0 (DirAddr 4), 
          EndProg, 
          Pop regN, 
          DecrSP, 
          Load (ImmValue 0) regO, 
          Push regO, 
          Pop regP, 
          DecrSP, 
          Load (ImmValue 10) regQ, 
          Compute Lt regP regQ regR, 
          Branch regR (Abs 56), 
          TestAndSet (DirAddr 12), 
          Receive regS, 
          Branch regS (Abs 40), 
          ReadInstr  (DirAddr 13), 
          Receive regA1, 
          Load (ImmValue 6) regB1, 
          Compute Add regA1 regB1 regC1, 
          WriteInstr regC1 (DirAddr 13), 
          WriteInstr reg0 (DirAddr 12), 
          Pop regD1, 
          DecrSP, 
          Load (ImmValue 1) regE1, 
          Compute Add regD1 regE1 regF1, 
          Pop reg0, 
          Push regF1, 
          Jump (Abs 35), 
          Nop, 
          Jump (Ind regN) 
       ] 
demoTest = sysTest [prog0, prog1, prog2]