module Main where

import BasicFunctions
import HardwareTypes
import Sprockell
import System
import Simulation

prog0 :: [Instruction]
prog0 = [
          Load (ImmValue 0) regA, 
          WriteInstr regA (DirAddr 13), 
          Load (ImmValue 1) regB, 
          WriteInstr reg0 (DirAddr 1), 
          WriteInstr regB (DirAddr 2), 
          Load (ImmValue 1) regC, 
          WriteInstr reg0 (DirAddr 3), 
          WriteInstr regC (DirAddr 4), 
          Load (ImmValue 0) regD, 
          Push regD, 
          Pop regE, 
          DecrSP, 
          Load (ImmValue 5) regF, 
          Compute Lt regE regF regG, 
          Branch regG (Abs 32), 
          Nop, 
          TestAndSet (DirAddr 12), 
          Receive regH, 
          Branch regH (Abs 16), 
          ReadInstr  (DirAddr 13), 
          Receive regI, 
          Load (ImmValue 1) regJ, 
          Compute Add regI regJ regK, 
          WriteInstr regK (DirAddr 13), 
          WriteInstr reg0 (DirAddr 12), 
          Pop regL, 
          DecrSP, 
          Load (ImmValue 1) regM, 
          Compute Add regL regM regN, 
          Pop reg0, 
          Push regN, 
          Jump (Abs 10), 
          Nop, 
          Load (ImmValue 1) regO, 
          Load (ImmValue 2) regP, 
          Compute Mul regP regO regP, 
          TestAndSet (IndAddr regP), 
          Receive regQ, 
          Branch regQ (Abs 33), 
          Load (ImmValue 2) regR, 
          Load (ImmValue 2) regS, 
          Compute Mul regS regR regS, 
          TestAndSet (IndAddr regS), 
          Receive regA1, 
          Branch regA1 (Abs 39), 
          Load (ImmValue 100) regB1, 
          WriteInstr regB1 (DirAddr 13), 
          EndProg, 
          Pop regC1, 
          DecrSP, 
          Load (ImmValue 0) regD1, 
          Push regD1, 
          Pop regE1, 
          DecrSP, 
          Load (ImmValue 5) regF1, 
          Compute Lt regE1 regF1 regG1, 
          Branch regG1 (Abs 74), 
          Nop, 
          TestAndSet (DirAddr 12), 
          Receive regH1, 
          Branch regH1 (Abs 58), 
          ReadInstr  (DirAddr 13), 
          Receive regI1, 
          Load (ImmValue 1) regJ1, 
          Compute Add regI1 regJ1 regK1, 
          WriteInstr regK1 (DirAddr 13), 
          WriteInstr reg0 (DirAddr 12), 
          Pop regL1, 
          DecrSP, 
          Load (ImmValue 1) regM1, 
          Compute Add regL1 regM1 regN1, 
          Pop reg0, 
          Push regN1, 
          Jump (Abs 52), 
          Nop, 
          Jump (Ind regC1) 
       ] 
prog1 :: [Instruction]
prog1 = [
          Load (ImmValue 1) regA, 
          WriteInstr regA (DirAddr 1), 
          TestAndSet (DirAddr 1), 
          Receive regB, 
          Branch regB (Abs 2), 
          Load (ImmValue 0) regC, 
          Push regC, 
          Pop regD, 
          DecrSP, 
          Load (ImmValue 5) regE, 
          Compute Lt regD regE regF, 
          Branch regF (Abs 29), 
          Nop, 
          TestAndSet (DirAddr 12), 
          Receive regG, 
          Branch regG (Abs 13), 
          ReadInstr  (DirAddr 13), 
          Receive regH, 
          Load (ImmValue 1) regI, 
          Compute Add regH regI regJ, 
          WriteInstr regJ (DirAddr 13), 
          WriteInstr reg0 (DirAddr 12), 
          Pop regK, 
          DecrSP, 
          Load (ImmValue 1) regL, 
          Compute Add regK regL regM, 
          Pop reg0, 
          Push regM, 
          Jump (Abs 7), 
          Nop, 
          WriteInstr reg0 (DirAddr 2), 
          EndProg 
       ] 
prog2 :: [Instruction]
prog2 = [
          Load (ImmValue 1) regA, 
          WriteInstr regA (DirAddr 3), 
          TestAndSet (DirAddr 3), 
          Receive regB, 
          Branch regB (Abs 2), 
          Load (ImmValue 0) regC, 
          Push regC, 
          Pop regD, 
          DecrSP, 
          Load (ImmValue 5) regE, 
          Compute Lt regD regE regF, 
          Branch regF (Abs 29), 
          Nop, 
          TestAndSet (DirAddr 12), 
          Receive regG, 
          Branch regG (Abs 13), 
          ReadInstr  (DirAddr 13), 
          Receive regH, 
          Load (ImmValue 1) regI, 
          Compute Add regH regI regJ, 
          WriteInstr regJ (DirAddr 13), 
          WriteInstr reg0 (DirAddr 12), 
          Pop regK, 
          DecrSP, 
          Load (ImmValue 1) regL, 
          Compute Add regK regL regM, 
          Pop reg0, 
          Push regM, 
          Jump (Abs 7), 
          Nop, 
          WriteInstr reg0 (DirAddr 4), 
          EndProg 
       ] 
main = sysTest [prog0, prog1, prog2]