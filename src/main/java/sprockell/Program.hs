module Main where

import BasicFunctions
import HardwareTypes
import Sprockell
import System
import Simulation

prog0 :: [Instruction]
prog0 = [
          Load (ImmValue 0) regA, 
          Store regA (DirAddr 1), 
          Load (ImmValue 0) regB, 
          WriteInstr regB (DirAddr 14), 
          Load (ImmValue 0) regC, 
          Store regC (DirAddr 1), 
          Load (ImmValue 1) regD, 
          WriteInstr reg0 (DirAddr 1), 
          WriteInstr regD (DirAddr 2), 
          Load (ImmValue 1) regE, 
          WriteInstr reg0 (DirAddr 3), 
          WriteInstr regE (DirAddr 4), 
          Load (ImmValue 1) regF, 
          WriteInstr reg0 (DirAddr 5), 
          WriteInstr regF (DirAddr 6), 
          Load (ImmValue 1) regG, 
          Load (ImmValue 2) regH, 
          Compute Mul regH regG regH, 
          TestAndSet (IndAddr regH), 
          Receive regI, 
          Branch regI (Abs 15), 
          Load (ImmValue 2) regJ, 
          Load (ImmValue 2) regK, 
          Compute Mul regK regJ regK, 
          TestAndSet (IndAddr regK), 
          Receive regL, 
          Branch regL (Abs 21), 
          Load (ImmValue 3) regM, 
          Load (ImmValue 2) regN, 
          Compute Mul regN regM regN, 
          TestAndSet (IndAddr regN), 
          Receive regO, 
          Branch regO (Abs 27), 
          Load (DirAddr 1) regP, 
          ReadInstr  (DirAddr 14), 
          Receive regQ, 
          Compute Add regP regQ regR, 
          Store regR (DirAddr 1), 
          EndProg, 
          Pop regS, 
          DecrSP, 
          Load (ImmValue 0) regA1, 
          Push regA1, 
          TestAndSet (DirAddr 12), 
          Receive regB1, 
          Branch regB1 (Abs 43), 
          Pop regC1, 
          DecrSP, 
          Load (ImmValue 10) regD1, 
          Compute Lt regC1 regD1 regE1, 
          Branch regE1 (Abs 63), 
          ReadInstr  (DirAddr 14), 
          Receive regF1, 
          Load (ImmValue 1) regG1, 
          Compute Add regF1 regG1 regH1, 
          WriteInstr regH1 (DirAddr 14), 
          Pop regI1, 
          DecrSP, 
          Load (ImmValue 1) regJ1, 
          Compute Add regI1 regJ1 regK1, 
          Pop reg0, 
          Push regK1, 
          Jump (Abs 46), 
          Nop, 
          WriteInstr reg0 (DirAddr 12), 
          Jump (Ind regS), 
          Pop regL1, 
          DecrSP, 
          Pop reg0, 
          Pop reg0, 
          Pop regM1, 
          DecrSP, 
          DecrSP, 
          DecrSP, 
          Pop reg0, 
          Pop reg0, 
          Pop reg0, 
          Pop regN1, 
          DecrSP, 
          DecrSP, 
          DecrSP, 
          DecrSP, 
          Compute Mul regM1 regN1 regO1, 
          Pop regP1, 
          Pop reg0, 
          Push regO1, 
          Push reg0, 
          Jump (Ind regP1), 
          Jump (Ind regL1) 
       ] 
prog1 :: [Instruction]
prog1 = [
          Load (ImmValue 1) regA, 
          WriteInstr regA (DirAddr 1), 
          TestAndSet (DirAddr 1), 
          Receive regB, 
          Branch regB (Abs 2), 
          Load (ImmValue 0) regC, 
          Push regC, 
          TestAndSet (DirAddr 12), 
          Receive regD, 
          Branch regD (Abs 7), 
          Pop regE, 
          DecrSP, 
          Load (ImmValue 10) regF, 
          Compute Lt regE regF regG, 
          Branch regG (Abs 27), 
          ReadInstr  (DirAddr 14), 
          Receive regH, 
          Load (ImmValue 1) regI, 
          Compute Add regH regI regJ, 
          WriteInstr regJ (DirAddr 14), 
          Pop regK, 
          DecrSP, 
          Load (ImmValue 1) regL, 
          Compute Add regK regL regM, 
          Pop reg0, 
          Push regM, 
          Jump (Abs 10), 
          Nop, 
          WriteInstr reg0 (DirAddr 12), 
          WriteInstr reg0 (DirAddr 2), 
          EndProg, 
          Pop regN, 
          DecrSP, 
          Pop reg0, 
          Pop reg0, 
          Pop regO, 
          DecrSP, 
          DecrSP, 
          DecrSP, 
          Pop reg0, 
          Pop reg0, 
          Pop reg0, 
          Pop regP, 
          DecrSP, 
          DecrSP, 
          DecrSP, 
          DecrSP, 
          Compute Mul regO regP regQ, 
          Pop regR, 
          Pop reg0, 
          Push regQ, 
          Push reg0, 
          Jump (Ind regR), 
          Jump (Ind regN) 
       ] 
prog2 :: [Instruction]
prog2 = [
          Load (ImmValue 1) regA, 
          WriteInstr regA (DirAddr 3), 
          TestAndSet (DirAddr 3), 
          Receive regB, 
          Branch regB (Abs 2), 
          Load (ImmValue 0) regC, 
          Push regC, 
          TestAndSet (DirAddr 12), 
          Receive regD, 
          Branch regD (Abs 7), 
          Pop regE, 
          DecrSP, 
          Load (ImmValue 10) regF, 
          Compute Lt regE regF regG, 
          Branch regG (Abs 27), 
          ReadInstr  (DirAddr 14), 
          Receive regH, 
          Load (ImmValue 1) regI, 
          Compute Add regH regI regJ, 
          WriteInstr regJ (DirAddr 14), 
          Pop regK, 
          DecrSP, 
          Load (ImmValue 1) regL, 
          Compute Add regK regL regM, 
          Pop reg0, 
          Push regM, 
          Jump (Abs 10), 
          Nop, 
          WriteInstr reg0 (DirAddr 12), 
          WriteInstr reg0 (DirAddr 4), 
          EndProg, 
          Pop regN, 
          DecrSP, 
          Pop reg0, 
          Pop reg0, 
          Pop regO, 
          DecrSP, 
          DecrSP, 
          DecrSP, 
          Pop reg0, 
          Pop reg0, 
          Pop reg0, 
          Pop regP, 
          DecrSP, 
          DecrSP, 
          DecrSP, 
          DecrSP, 
          Compute Mul regO regP regQ, 
          Pop regR, 
          Pop reg0, 
          Push regQ, 
          Push reg0, 
          Jump (Ind regR), 
          Jump (Ind regN) 
       ] 
prog3 :: [Instruction]
prog3 = [
          Load (ImmValue 1) regA, 
          WriteInstr regA (DirAddr 5), 
          TestAndSet (DirAddr 5), 
          Receive regB, 
          Branch regB (Abs 2), 
          Load (ImmValue 0) regC, 
          Push regC, 
          TestAndSet (DirAddr 12), 
          Receive regD, 
          Branch regD (Abs 7), 
          Pop regE, 
          DecrSP, 
          Load (ImmValue 10) regF, 
          Compute Lt regE regF regG, 
          Branch regG (Abs 27), 
          ReadInstr  (DirAddr 14), 
          Receive regH, 
          Load (ImmValue 1) regI, 
          Compute Add regH regI regJ, 
          WriteInstr regJ (DirAddr 14), 
          Pop regK, 
          DecrSP, 
          Load (ImmValue 1) regL, 
          Compute Add regK regL regM, 
          Pop reg0, 
          Push regM, 
          Jump (Abs 10), 
          Nop, 
          WriteInstr reg0 (DirAddr 12), 
          WriteInstr reg0 (DirAddr 6), 
          EndProg, 
          Pop regN, 
          DecrSP, 
          Pop reg0, 
          Pop reg0, 
          Pop regO, 
          DecrSP, 
          DecrSP, 
          DecrSP, 
          Pop reg0, 
          Pop reg0, 
          Pop reg0, 
          Pop regP, 
          DecrSP, 
          DecrSP, 
          DecrSP, 
          DecrSP, 
          Compute Mul regO regP regQ, 
          Pop regR, 
          Pop reg0, 
          Push regQ, 
          Push reg0, 
          Jump (Ind regR), 
          Jump (Ind regN) 
       ] 
main = sysTest [prog0, prog1, prog2, prog3]